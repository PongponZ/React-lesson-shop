how to create react 
    

React 
    เป็นตัวช่วยในการจัดการตัว UI ให้อยู่ในรูปแบบของ Component 
    คือเป็นส่วนของหน้าบ้านอย่างเดียวและต้องหาส่วนอื่นๆมาเติมให้กับมัน 

Node.js 
    เอาไว้ช่วยเรื่องฝั่ง Back-end

CSS Framework
    react-bootstrap **น่าสนใจ**

Arrow Function, =>
    คือการเขียนรูป Function แบบย่อเช่น
    Normal
        function add(a,b){
            return a+b;
        }

    Arrow
        const add = (a,b) => a+b

props 
    การส่งค่าจาก Component A(Paren) ไปที่ Component B(clidren)

    let {CurrentUser} = this.props 
        หมายความว่าให้ตัวแปล CurrentUser มีค่าเท่ากับ this.props.CurrentUser

    {isLogin && CurrentUser}
        หมายความถ้าซ้าย(isLogin) เป็นจริงให้มีค่าเท่ากับฝั่งขวา(CurrentUser)

    แบบด้านล่างนี้เรียกว่าการทำ children props
    แบบที่ 1 
    App.js
        <CardList>
            {
                this.state.marvel.map(marvel => <h3 key = {marvel.id}>{marvel.name}</h3>)
            }
        </CardList>

    CardList
        export const CardList = props => <div className ='card-list'>{props.children}</div>
    
    แบบที่ 2
    App.js 
        <div>
          <CardList marvel = {this.state.marvel}/>
        </div>
    CardList
        export const CardList = props => 
            (<div className ='card-list'>
                {props.marvel.map(marvel => 
                    (<h3 key = {marvel.id}>{marvel.name}</h3>))
                }
            </div>);



state
    สิ่งที่ Component เก็บข้อมูลไว้เอง
    การเปลี่ยนค่าใน State ต้องใช้ setSate({..})

map()
    คือฟังชั่น foreach loop ในการดึงค่าที่อยู่ใน Array ออกมา
    ex
        this.state.marvel.map(marvel => <h3 key = {marvel.id}>{marvel.name}</h3>)



Ract Life Cycele
    ComponentDidMount() 
        ปกติจะใช้ในการกำหนดค่าทุกๆอย่างที่ต้องใช้ DOM และรับข้อมูลที่ต้องการมาแสดงผล

        componentDidMount(){
            fetch('https://jsonplaceholder.typicode.com/users')
            .then(Response => Response.json())
            .then(users => console.log(users))
        }
        fetch คือฟังชั่นที่ใช้ในการดึงข้อมูล
        .then คือหลังจากที่ดึงมาแล้วให้ทำอะไร

Synthetic Event
    React จะมีสิ่งที่เรียกว่า Synthetic Event ซึ่งจะช่วยให้ event ในทุก Browser ทำงานได้ไม่แตกต่างกัน
    โดยเราจะได้รับ Synthetic Event จาก Event Handler หลังจากเกิด Event นั่นเอง
    JavaScript Synthetic Event ก็คือ Object { } ธรรมดาๆ นี่เอง
    ใน Synthetic Event มี key ที่ใช้บ่อยๆคือ
        .target ใช้สำหรับอ่านค่าจาก element ที่เกิด event
        .preventDefault() ใช้ยกเลิก default action ของ HTML

Should func_Component or Class_component
    func_Component ใช้เมื่ิถ้าไม่ได้เก็บค่าอะไรไว้
    Class_component ใช้เมื่อมีการเก็บค่าไว้เช่น state


Redux
    คือตัวช่วยในการจัดการ state และทำการ store ข้อมูลไว้เมื่อ component ที่ไม่ได้่เกี่ยวข้องต้อง
    การเรียกใช้ข้อมูลโดยจะใช้วิธีที่เรียกว่า "subscribe" โดย Redux ประกอบไปด้วย
     - reducer คือตัวที่ใช้ในการจัดการ state เป็น Pure Function
     - dispatch คือตัวที่ใช้ในการใส่ข้อมูลที่ต้องการเปลี่ยนแปลงและ "Action"
     - connect()() ?
     
    ทำไมต้องใช้ Redux 
        - จัดการกับ state ใหญ่ๆได้ดี
        - มีความสามารถในการแชร์ state between component

    Concept
        1.Single souce of truth
        2.State is read only
        3.Change using pure function
    
    Redux flow
        (Action) => (Root Reducer) => (Store) => (DOM Change)

    เพิ่มเติม https://devahoy.com/blog/2018/07/introduction-to-redux/
    
Reducers
    Reducers เปรียบเสมือนคล้ายๆ Controller ใน MVC คือจะเป็นตัวที่รับ
    Action มาเพื่อดูว่า Action นี้ต้องการจะทำอะไร จากนั้นก็ส่ง Action ไปหา Store นั่นเอง

    | reducers : ต้องทำการ return Object ใหม่เท่านั้น จะไม่ทำการแก้ไข Object เดิม (เป็น Pure function)

    ซึ่ง Reducer มันเป็นฟังค์ชัน ที่รับ previousState และ action แล้ว return newState กลับไป

    | (previousState, action) => newState
    
    สิ่งที่ควรหลีกเลี่ยงใน Reducers

    อย่าเรียก non pure function เช่น new Date() หรือ Math.random()
    เปลี่ยนแปลงค่า argument ที่รับมาตรงๆ (mutation)   


Pure Function
    การเขียน function ที่ไม่ทำให้เกิด "side effect" 
    โดย side effect นั่นก็คือผลกระทบกับสิ่งต่างๆภายนอก function
    เช่น การเปลี่ยนแปลงค่าของ global variable การเขียนข้อมูลลง database
    หรือแม้แต่ การ print ค่าไปแสดงบน console
    โดยรูปแบบจะเป็น

    function name(a){
        a += 1
        return a
    }


Reselect
    เป็น library ของ Redux ที่จะช่วยลดการ Render ลง 
    การใช้ Reselect จะช่วยลดการ Render Scope ลงจาก Store 
    ทั้งหมดให้เหลือเพียงแค่ภายใน mapStateToProps เท่านั้น

middlewares 
    มันทำอะไรได้บ้าง ? สำหรับ developers ที่เคยทำงานกับส่วน backend แล้วเคยใช้
    library เช่น Express หรือ Koa ก็จะคุ้นเคย concept ของ middlewares เป็นอย่างดี
    ว่า middlewares นั้นคือ “code บางอย่าง ที่เราวางไว้ตรงกลางระหว่างตอนที่ framework
    รับ request และตอนที่ framework สร้าง response” ตัวอย่างเช่น logging, 
    การ validate request, การบีบอัดไฟล์ หรืออื่นๆ ข้อดีสุดๆของ middlewares 
    คือเราสามารถเรียกใช้ middlewares ต่อเนื่องกันได้ ทำให้เราสามารถใช้ third-party 
    middleware หลายๆตัวต่อเนื่องกันได้เลย
    อ่านเพิ่มเติม
        https://engineering.thinknet.co.th/%E0%B8%A1%E0%B8%B5%E0%B9%83%E0%B8%84%E0%B8%A3%E0%B8%A3%E0%B8%B9%E0%B9%89%E0%B8%88%E0%B8%B1%E0%B8%81-redux-middleware-%E0%B8%9A%E0%B9%89%E0%B8%B2%E0%B8%87%E0%B8%A1%E0%B8%B1%E0%B9%89%E0%B8%A2%E0%B8%84%E0%B8%A3%E0%B8%B1%E0%B8%9A-bc718b36f08c

Redux-Saga
    https://blog.appsynth.net/%E0%B8%84%E0%B8%A7%E0%B8%9A%E0%B8%84%E0%B8%B8%E0%B8%A1-flow-%E0%B8%82%E0%B8%AD%E0%B8%87%E0%B9%81%E0%B8%AD%E0%B8%9E-react-native-%E0%B8%94%E0%B9%89%E0%B8%A7%E0%B8%A2-redux-saga-4a85cebb1773

-----------------------
Generator function



filter()
    ?

history API
    ?